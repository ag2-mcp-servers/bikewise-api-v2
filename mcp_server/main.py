# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:13:05+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import IncidentType

app = MCPProxy(
    contact={'email': 'support@bikeindex.org'},
    description='<p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href="https://github.com/bikeindex/bikewise">GitHub</a>.</p>\n',
    title='BikeWise API v2',
    version='v2',
    servers=[{'url': 'https://bikewise.org/api'}],
)


@app.get(
    '/v2/incidents',
    description=""" 
<p>If you’d like more detailed information about bike incidents, use this endpoint. For mapping, <code>locations</code> is probably a better bet.</p>

<p><strong>Notes on location searching</strong>: <br />
- <code>proximity</code> accepts an ip address, an address, zipcode, city, or latitude,longitude - i.e. <code>70.210.133.87</code>, <code>210 NW 11th Ave, Portland, OR</code>, <code>60647</code>, <code>Chicago, IL</code>, and <code>45.521728,-122.67326</code> are all acceptable<br />
- <code>proximity_square</code> sets the length of the sides of the square to find matches inside of. The square is centered on the location specified by <code>proximity</code>. It defaults to 100.</p>
 """,
    tags=['incident_management', 'location_querying'],
)
def g_e_t__version_incidents___format_(
    page: Optional[int] = 1,
    per_page: Optional[int] = None,
    occurred_before: Optional[int] = None,
    occurred_after: Optional[int] = None,
    incident_type: Optional[IncidentType] = None,
    proximity: Optional[str] = None,
    proximity_square: Optional[int] = 100,
    query: Optional[str] = None,
):
    """
    Paginated incidents matching parameters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v2/incidents/{id}', tags=['incident_management'])
def g_e_t__version_incidents__id___format_(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/locations',
    description=""" <p><strong>This endpoint behaves exactly like</strong> <code>incidents</code>, but returns a valid geojson <code>FeatureCollection</code> that looks like this:</p>

<pre><code>{
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
      id: 4474199,
      type: "Theft",
      occurred_at: 1428536937
    },
      geometry: {
      type: "Point",
      coordinates: [ -122.6244177, 45.5164386 ]
    }
  }
}
</code></pre>

<p>It doesn’t paginate. If you pass the <code>all</code> parameter it returns all matches (which can be big, &gt; 4mb), otherwise it returns the 100 most recent.</p>

<p><strong>Go forth and make maps!</strong></p>
 """,
    tags=['incident_management', 'location_querying'],
)
def g_e_t__version_locations___format_(
    occurred_before: Optional[int] = None,
    occurred_after: Optional[int] = None,
    incident_type: Optional[IncidentType] = None,
    proximity: Optional[str] = None,
    proximity_square: Optional[int] = 100,
    query: Optional[str] = None,
    limit: Optional[int] = None,
    all: Optional[bool] = None,
):
    """
    Unpaginated geojson response
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/locations/markers',
    description=""" <p>This behaves exactly like the root <code>locations</code> endpoint, but returns <a href="https://github.com/mapbox/simplestyle-spec">simplestyled markers</a> (<a href="https://www.mapbox.com/guides/markers/#simple-style">mapbox styled markers</a>)</p>

<p><strong>Go forth and make maps!</strong></p>
 """,
    tags=['incident_management', 'location_querying'],
)
def g_e_t__version_locations_markers___format_(
    occurred_before: Optional[int] = None,
    occurred_after: Optional[int] = None,
    incident_type: Optional[IncidentType] = None,
    proximity: Optional[str] = None,
    proximity_square: Optional[int] = 100,
    query: Optional[str] = None,
    limit: Optional[int] = None,
    all: Optional[bool] = None,
):
    """
    Unpaginated geojson response with simplestyled markers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
